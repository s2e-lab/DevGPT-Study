code,col_offset,end_col_offset,filename,issue_confidence,issue_cwe,issue_severity,issue_text,line_number,line_range,more_info,test_id,test_name
"5     characters = string.ascii_letters + string.digits + string.punctuation
6     password = ''.join(random.choice(characters) for _ in range(length))
7     return password
",23,48,Python/0856c3a4-2673-4d24-869d-47b4d128d099_0.py,HIGH,330,LOW,Standard pseudo-random generators are not suitable for security/cryptographic purposes.,6,[6],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b311-random,B311,blacklist
"7 locals_ = {}
8 exec(code, {}, locals_)
9 print(locals_['result'])  # Output: 3
",0,23,Python/0b7b9fec-30b4-40dd-b887-fb7328f303f2_0.py,HIGH,78,MEDIUM,Use of exec detected.,8,[8],https://bandit.readthedocs.io/en/1.7.5/plugins/b102_exec_used.html,B102,exec_used
"3 sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
4 sock.bind(('0.0.0.0', 12345))  # Listen on all IP addresses, port 12345
",11,20,Python/0b86282d-7073-41c5-ba97-40de9902ae01_0.py,MEDIUM,605,MEDIUM,Possible binding to all interfaces.,4,[4],https://bandit.readthedocs.io/en/1.7.5/plugins/b104_hardcoded_bind_all_interfaces.html,B104,hardcoded_bind_all_interfaces
"7     
8     response = requests.get(compare_url, headers=headers)
9 
",15,57,Python/184ff4fa-49c5-40f6-9d6c-0a0b2d13971b_0.py,LOW,400,MEDIUM,Requests call without timeout,8,[8],https://bandit.readthedocs.io/en/1.7.5/plugins/b113_request_without_timeout.html,B113,request_without_timeout
"22 branch_b = ""B""
23 access_token = ""your_github_access_token""  # Only required for private repositories
24 
",15,41,Python/184ff4fa-49c5-40f6-9d6c-0a0b2d13971b_0.py,MEDIUM,259,LOW,Possible hardcoded password: 'your_github_access_token',23,[23],https://bandit.readthedocs.io/en/1.7.5/plugins/b105_hardcoded_password_string.html,B105,hardcoded_password_string
"1 import numpy as np
2 import pickle
3 from sentence_transformers import SentenceTransformer
",0,13,Python/25c2703e-d89d-465c-9808-4df1b3eb40fa_0.py,HIGH,502,LOW,Consider possible security implications associated with pickle module.,2,[2],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_imports.html#b403-import-pickle,B403,blacklist
"10 with open(""words.pkl"", ""rb"") as file:
11     data = pickle.load(file)
12 
",11,28,Python/25c2703e-d89d-465c-9808-4df1b3eb40fa_0.py,HIGH,502,MEDIUM,"Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",11,[11],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b301-pickle,B301,blacklist
"1 import numpy as np
2 import pickle
3 from sentence_transformers import SentenceTransformer, util
",0,13,Python/25c2703e-d89d-465c-9808-4df1b3eb40fa_1.py,HIGH,502,LOW,Consider possible security implications associated with pickle module.,2,[2],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_imports.html#b403-import-pickle,B403,blacklist
"12 with open(""words.pkl"", ""rb"") as file:
13     data = pickle.load(file)
14 
",11,28,Python/25c2703e-d89d-465c-9808-4df1b3eb40fa_1.py,HIGH,502,MEDIUM,"Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",13,[13],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b301-pickle,B301,blacklist
"12 # Fetch the work keys from the URL
13 response = requests.get(keys_url)
14 response.raise_for_status()  # Raise an exception if the request failed
",11,33,Python/33867c63-5def-4c0a-9ad0-19317f737515_0.py,LOW,400,MEDIUM,Requests call without timeout,13,[13],https://bandit.readthedocs.io/en/1.7.5/plugins/b113_request_without_timeout.html,B113,request_without_timeout
"19     # fetch the list of editions for the current work_key
20     response = requests.get(get_url.format(work_key=work_key))
21 
",15,62,Python/33867c63-5def-4c0a-9ad0-19317f737515_0.py,LOW,400,MEDIUM,Requests call without timeout,20,[20],https://bandit.readthedocs.io/en/1.7.5/plugins/b113_request_without_timeout.html,B113,request_without_timeout
"34                     # update the edition record
35                     update_response = requests.put(put_url.format(ol_key=entry['key']), json=entry)
36 
",38,99,Python/33867c63-5def-4c0a-9ad0-19317f737515_0.py,LOW,400,MEDIUM,Requests call without timeout,35,[35],https://bandit.readthedocs.io/en/1.7.5/plugins/b113_request_without_timeout.html,B113,request_without_timeout
"13 if __name__ == ""__main__"":
14     app.run(debug=True)
",4,23,Python/3767033d-7da0-47e3-9383-a5556e4dc1eb_1.py,MEDIUM,94,HIGH,"A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.",14,[14],https://bandit.readthedocs.io/en/1.7.5/plugins/b201_flask_debug_true.html,B201,flask_debug_true
"4 # Check that targets match data
5 assert (np.array(train) == np.array(dataset.data[cutoff:])).all()
6 assert (np.array(test) == np.array(dataset.data[:cutoff])).all()
",0,65,Python/3b41287a-bd84-4f08-823a-ce9c0c0e7f03_0.py,HIGH,703,LOW,Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.,5,[5],https://bandit.readthedocs.io/en/1.7.5/plugins/b101_assert_used.html,B101,assert_used
"5 assert (np.array(train) == np.array(dataset.data[cutoff:])).all()
6 assert (np.array(test) == np.array(dataset.data[:cutoff])).all()
7 
",0,64,Python/3b41287a-bd84-4f08-823a-ce9c0c0e7f03_0.py,HIGH,703,LOW,Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.,6,[6],https://bandit.readthedocs.io/en/1.7.5/plugins/b101_assert_used.html,B101,assert_used
"1 import paramiko
2 import subprocess
3 import concurrent.futures
",0,17,Python/3ba6a4c6-ed44-42fd-92ad-cfba44c3f5aa_0.py,HIGH,78,LOW,Consider possible security implications associated with the subprocess module.,2,[2],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_imports.html#b404-import-subprocess,B404,blacklist
"15         session = client.get_transport().open_session()
16         session.exec_command(command)
17 
",8,37,Python/3ba6a4c6-ed44-42fd-92ad-cfba44c3f5aa_0.py,MEDIUM,78,MEDIUM,"Possible shell injection via Paramiko call, check inputs are properly sanitized.",16,[16],https://bandit.readthedocs.io/en/1.7.5/plugins/b601_paramiko_calls.html,B601,paramiko_calls
"26     # Execute the command and capture the output
27     result = subprocess.run(command, shell=True, capture_output=True, text=True)
28 
",13,80,Python/3ba6a4c6-ed44-42fd-92ad-cfba44c3f5aa_0.py,HIGH,78,HIGH,"subprocess call with shell=True identified, security issue.",27,[27],https://bandit.readthedocs.io/en/1.7.5/plugins/b602_subprocess_popen_with_shell_equals_true.html,B602,subprocess_popen_with_shell_equals_true
"3 def biased_multiplier():
4     x = random.uniform(1, 10)  # Generate a random number between 1 and 10
5     probability = 1 / x        # Calculate the probability inversely proportional to x
",8,29,Python/3d5aa56d-c9ac-40de-9ace-a59a74ce9091_0.py,HIGH,330,LOW,Standard pseudo-random generators are not suitable for security/cryptographic purposes.,4,[4],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b311-random,B311,blacklist
"5     probability = 1 / x        # Calculate the probability inversely proportional to x
6     random_value = random.uniform(0, 1)
7     
",19,39,Python/3d5aa56d-c9ac-40de-9ace-a59a74ce9091_0.py,HIGH,330,LOW,Standard pseudo-random generators are not suitable for security/cryptographic purposes.,6,[6],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b311-random,B311,blacklist
"4 client_id = 'your_client_id'
5 client_secret = 'your_client_secret'
6 
",16,36,Python/3dc41df5-e2b3-45da-a61a-0390ee9c093c_1.py,MEDIUM,259,LOW,Possible hardcoded password: 'your_client_secret',5,[5],https://bandit.readthedocs.io/en/1.7.5/plugins/b105_hardcoded_password_string.html,B105,hardcoded_password_string
"5 username = 'your_username'
6 password = 'your_password'
7 host = 'your_host'
",11,26,Python/3f615ac3-2dd3-4dba-9456-3ff8f5530628_0.py,MEDIUM,259,LOW,Possible hardcoded password: 'your_password',6,[6],https://bandit.readthedocs.io/en/1.7.5/plugins/b105_hardcoded_password_string.html,B105,hardcoded_password_string
"1 def get_post():
2     response = requests.get('https://jsonplaceholder.typicode.com/posts/1')
3     post = response.json()
",15,75,Python/406ef53d-9b48-4433-88f6-66cdaf1aff1e_2.py,LOW,400,MEDIUM,Requests call without timeout,2,[2],https://bandit.readthedocs.io/en/1.7.5/plugins/b113_request_without_timeout.html,B113,request_without_timeout
"12 # Send a GET request to the API endpoint
13 response = requests.get(api_url, auth=auth, params={'projectKey': project_key})
14 
",11,79,Python/440407a1-df1c-4f1e-84b9-76ffec9fd918_0.py,LOW,400,MEDIUM,Requests call without timeout,13,[13],https://bandit.readthedocs.io/en/1.7.5/plugins/b113_request_without_timeout.html,B113,request_without_timeout
"29         while True:
30             x, y = random.randint(0, BOARD_SIZE - 1), random.randint(0, BOARD_SIZE - 1)
31             if board[x][y] == EMPTY:
",19,52,Python/4435152f-ba13-45a5-a116-eb4f57b27ab2_0.py,HIGH,330,LOW,Standard pseudo-random generators are not suitable for security/cryptographic purposes.,30,[30],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b311-random,B311,blacklist
"29         while True:
30             x, y = random.randint(0, BOARD_SIZE - 1), random.randint(0, BOARD_SIZE - 1)
31             if board[x][y] == EMPTY:
",54,87,Python/4435152f-ba13-45a5-a116-eb4f57b27ab2_0.py,HIGH,330,LOW,Standard pseudo-random generators are not suitable for security/cryptographic purposes.,30,[30],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b311-random,B311,blacklist
"4     try:
5         response = requests.get(url)
6         # Check if the response status code is in the 2xx range (successful)
",19,36,Python/4c2ffc97-0469-4ec5-a1ff-2277e75ec882_1.py,LOW,400,MEDIUM,Requests call without timeout,5,[5],https://bandit.readthedocs.io/en/1.7.5/plugins/b113_request_without_timeout.html,B113,request_without_timeout
"3 rpc_user = 'dein_rpc_benutzername'
4 rpc_password = 'dein_rpc_passwort'
5 rpc_port = 'port_des_nodes'  # Standardport ist 18332 für testnet
",15,34,Python/5aceca75-426a-42e9-bce1-3c90ce467586_0.py,MEDIUM,259,LOW,Possible hardcoded password: 'dein_rpc_passwort',4,[4],https://bandit.readthedocs.io/en/1.7.5/plugins/b105_hardcoded_password_string.html,B105,hardcoded_password_string
"3 rpc_user = 'dein_rpc_benutzername'
4 rpc_password = 'dein_rpc_passwort'
5 rpc_port = 'port_des_nodes'  # Standardport ist 18443 für regtest
",15,34,Python/5aceca75-426a-42e9-bce1-3c90ce467586_1.py,MEDIUM,259,LOW,Possible hardcoded password: 'dein_rpc_passwort',4,[4],https://bandit.readthedocs.io/en/1.7.5/plugins/b105_hardcoded_password_string.html,B105,hardcoded_password_string
"20 # Fetch data from the URL
21 response = requests.get(url)
22 
",11,28,Python/5ce5fe49-10e4-44bf-b8f9-f154cd73212c_0.py,LOW,400,MEDIUM,Requests call without timeout,21,[21],https://bandit.readthedocs.io/en/1.7.5/plugins/b113_request_without_timeout.html,B113,request_without_timeout
"20 # Fetch data from the URL
21 response = requests.get(url)
22 
",11,28,Python/5ce5fe49-10e4-44bf-b8f9-f154cd73212c_1.py,LOW,400,MEDIUM,Requests call without timeout,21,[21],https://bandit.readthedocs.io/en/1.7.5/plugins/b113_request_without_timeout.html,B113,request_without_timeout
"28 
29     response = requests.get(TYPEFORM_API, headers=headers, params=params)
30     return response.json()
",15,73,Python/5dba4c81-dd67-4247-becc-32e90d1bda5e_0.py,LOW,400,MEDIUM,Requests call without timeout,29,[29],https://bandit.readthedocs.io/en/1.7.5/plugins/b113_request_without_timeout.html,B113,request_without_timeout
"6 # Send a GET request to the API endpoint with the location parameter
7 response = requests.get(api_endpoint, params={""location"": location})
8 
",11,68,Python/60872539-7283-4552-ab65-987164e94431_1.py,LOW,400,MEDIUM,Requests call without timeout,7,[7],https://bandit.readthedocs.io/en/1.7.5/plugins/b113_request_without_timeout.html,B113,request_without_timeout
"23     # Add some random variation
24     cost = random.uniform(base_cost - 20, base_cost + 20)
25     return round(cost, 2)
",11,57,Python/6a5e1c60-b9a2-42bb-9b23-39e61358b577_0.py,HIGH,330,LOW,Standard pseudo-random generators are not suitable for security/cryptographic purposes.,24,[24],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b311-random,B311,blacklist
"34     for person in people:
35         num_claims = random.randint(1, 5)  # Random number of claims per person per year
36         for _ in range(num_claims):
",21,41,Python/6a5e1c60-b9a2-42bb-9b23-39e61358b577_0.py,HIGH,330,LOW,Standard pseudo-random generators are not suitable for security/cryptographic purposes.,35,[35],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b311-random,B311,blacklist
"36         for _ in range(num_claims):
37             claim_type = random.choice(claim_types)
38             cost = generate_claim_cost(claim_type, year)
",25,51,Python/6a5e1c60-b9a2-42bb-9b23-39e61358b577_0.py,HIGH,330,LOW,Standard pseudo-random generators are not suitable for security/cryptographic purposes.,37,[37],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b311-random,B311,blacklist
"38             cost = generate_claim_cost(claim_type, year)
39             date = pd.to_datetime(f""{random.randint(1, 12)}/{random.randint(1, 28)}/{year}"", format='%m/%d/%Y')
40             data.append([person, claim_type, date, year, cost])
",37,58,Python/6a5e1c60-b9a2-42bb-9b23-39e61358b577_0.py,HIGH,330,LOW,Standard pseudo-random generators are not suitable for security/cryptographic purposes.,39,[39],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b311-random,B311,blacklist
"38             cost = generate_claim_cost(claim_type, year)
39             date = pd.to_datetime(f""{random.randint(1, 12)}/{random.randint(1, 28)}/{year}"", format='%m/%d/%Y')
40             data.append([person, claim_type, date, year, cost])
",61,82,Python/6a5e1c60-b9a2-42bb-9b23-39e61358b577_0.py,HIGH,330,LOW,Standard pseudo-random generators are not suitable for security/cryptographic purposes.,39,[39],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b311-random,B311,blacklist
"62 if __name__ == '__main__':
63     app.run(debug=True)
",4,23,Python/6d2cf27c-1323-4136-942b-81952b7b9380_0.py,MEDIUM,94,HIGH,"A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.",63,[63],https://bandit.readthedocs.io/en/1.7.5/plugins/b201_flask_debug_true.html,B201,flask_debug_true
"15     domain_name = ""example.com""
16     secret_data = ""This is a secret payload!""
17 
",18,45,Python/720c1c30-6ee6-444b-b3b4-48eaec04bcd4_0.py,MEDIUM,259,LOW,Possible hardcoded password: 'This is a secret payload!',16,[16],https://bandit.readthedocs.io/en/1.7.5/plugins/b105_hardcoded_password_string.html,B105,hardcoded_password_string
"1 from Crypto.Cipher import AES
2 from Crypto.Random import get_random_bytes
3 from Crypto.Util.Padding import pad
",0,29,Python/720c1c30-6ee6-444b-b3b4-48eaec04bcd4_1.py,HIGH,327,HIGH,The pyCrypto library and its module AES are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library.,1,[1],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_imports.html#b413-import-pycrypto,B413,blacklist
"1 from Crypto.Cipher import AES
2 from Crypto.Random import get_random_bytes
3 from Crypto.Util.Padding import pad
",0,42,Python/720c1c30-6ee6-444b-b3b4-48eaec04bcd4_1.py,HIGH,327,HIGH,The pyCrypto library and its module get_random_bytes are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library.,2,[2],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_imports.html#b413-import-pycrypto,B413,blacklist
"2 from Crypto.Random import get_random_bytes
3 from Crypto.Util.Padding import pad
4 from scapy.all import *
",0,35,Python/720c1c30-6ee6-444b-b3b4-48eaec04bcd4_1.py,HIGH,327,HIGH,The pyCrypto library and its module pad are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library.,3,[3],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_imports.html#b413-import-pycrypto,B413,blacklist
"26     domain_name = ""example.com""
27     secret_data = ""This is a secret payload!""
28     aes_key = get_random_bytes(16)  # 16 bytes key for AES-128
",18,45,Python/720c1c30-6ee6-444b-b3b4-48eaec04bcd4_1.py,MEDIUM,259,LOW,Possible hardcoded password: 'This is a secret payload!',27,[27],https://bandit.readthedocs.io/en/1.7.5/plugins/b105_hardcoded_password_string.html,B105,hardcoded_password_string
"30     # You should define your specific assertions here based on your transformation rules.
31     assert result_4d == result_2d
32 
",4,33,Python/7bbda216-f232-4080-99ab-814bf63ecc0b_0.py,HIGH,703,LOW,Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.,31,[31],https://bandit.readthedocs.io/en/1.7.5/plugins/b101_assert_used.html,B101,assert_used
"9 app = Flask(__name__)
10 app.config['SECRET_KEY'] = 'secret!'
11 socketio = SocketIO(app)
",11,23,Python/7f4e6b21-7c6e-4efe-9a97-615831b3c059_0.py,MEDIUM,259,LOW,Possible hardcoded password: 'secret!',10,[10],https://bandit.readthedocs.io/en/1.7.5/plugins/b105_hardcoded_password_string.html,B105,hardcoded_password_string
"4 def test_numbers(i, j):
5     assert i != j
",4,17,Python/9841c3a6-3be4-4450-b3a5-b6d7cbe81250_4.py,HIGH,703,LOW,Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.,5,[5],https://bandit.readthedocs.io/en/1.7.5/plugins/b101_assert_used.html,B101,assert_used
"8     # Generate a random password
9     password = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(12))
10 
",23,74,Python/9913ac57-2b1e-4bce-adda-04f3521c64fe_0.py,HIGH,330,LOW,Standard pseudo-random generators are not suitable for security/cryptographic purposes.,9,[9],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b311-random,B311,blacklist
"48 if __name__ == '__main__':
49     app.run(debug=True)
",4,23,Python/a3634550-9752-479e-937a-b3db80c88449_0.py,MEDIUM,94,HIGH,"A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.",49,[49],https://bandit.readthedocs.io/en/1.7.5/plugins/b201_flask_debug_true.html,B201,flask_debug_true
"31 if __name__ == '__main__':
32     app.run(debug=True)
",4,23,Python/a3634550-9752-479e-937a-b3db80c88449_1.py,MEDIUM,94,HIGH,"A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.",32,[32],https://bandit.readthedocs.io/en/1.7.5/plugins/b201_flask_debug_true.html,B201,flask_debug_true
"1 import socket
2 import subprocess
3 import os
",0,17,Python/a8399b03-9d33-444a-bce3-e7995d351316_0.py,HIGH,78,LOW,Consider possible security implications associated with the subprocess module.,2,[2],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_imports.html#b404-import-subprocess,B404,blacklist
"28                 try:
29                     process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
30                     stdout, stderr = process.communicate()
",30,138,Python/a8399b03-9d33-444a-bce3-e7995d351316_0.py,HIGH,78,HIGH,"subprocess call with shell=True identified, security issue.",29,[29],https://bandit.readthedocs.io/en/1.7.5/plugins/b602_subprocess_popen_with_shell_equals_true.html,B602,subprocess_popen_with_shell_equals_true
"15 def test_read_file(filepath, expected):
16     assert read_file(filepath) == expected
",4,42,Python/b062955d-3601-4051-b6d9-80cef9228233_0.py,HIGH,703,LOW,Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.,16,[16],https://bandit.readthedocs.io/en/1.7.5/plugins/b101_assert_used.html,B101,assert_used
"29         self.body = [(GRID_WIDTH // 2, GRID_HEIGHT // 2)]
30         self.direction = random.choice([UP, DOWN, LEFT, RIGHT])
31 
",25,63,Python/b4b399ef-1def-4f68-b2f1-8c56ca3858ae_1.py,HIGH,330,LOW,Standard pseudo-random generators are not suitable for security/cryptographic purposes.,30,[30],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b311-random,B311,blacklist
"53     def __init__(self):
54         self.position = (random.randint(0, GRID_WIDTH-1), random.randint(0, GRID_HEIGHT-1))
55 
",25,56,Python/b4b399ef-1def-4f68-b2f1-8c56ca3858ae_1.py,HIGH,330,LOW,Standard pseudo-random generators are not suitable for security/cryptographic purposes.,54,[54],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b311-random,B311,blacklist
"53     def __init__(self):
54         self.position = (random.randint(0, GRID_WIDTH-1), random.randint(0, GRID_HEIGHT-1))
55 
",58,90,Python/b4b399ef-1def-4f68-b2f1-8c56ca3858ae_1.py,HIGH,330,LOW,Standard pseudo-random generators are not suitable for security/cryptographic purposes.,54,[54],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b311-random,B311,blacklist
"56     def randomize_position(self):
57         self.position = (random.randint(0, GRID_WIDTH-1), random.randint(0, GRID_HEIGHT-1))
58 
",25,56,Python/b4b399ef-1def-4f68-b2f1-8c56ca3858ae_1.py,HIGH,330,LOW,Standard pseudo-random generators are not suitable for security/cryptographic purposes.,57,[57],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b311-random,B311,blacklist
"56     def randomize_position(self):
57         self.position = (random.randint(0, GRID_WIDTH-1), random.randint(0, GRID_HEIGHT-1))
58 
",58,90,Python/b4b399ef-1def-4f68-b2f1-8c56ca3858ae_1.py,HIGH,330,LOW,Standard pseudo-random generators are not suitable for security/cryptographic purposes.,57,[57],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b311-random,B311,blacklist
"1 import subprocess
2 import threading
3 
",0,17,Python/b50a1f89-6c17-413b-aeb0-a04ef43c831c_0.py,HIGH,78,LOW,Consider possible security implications associated with the subprocess module.,1,[1],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_imports.html#b404-import-subprocess,B404,blacklist
"7 # Create a subprocess to start the server.
8 server_process = subprocess.Popen(server_command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True)
9 
",17,143,Python/b50a1f89-6c17-413b-aeb0-a04ef43c831c_0.py,HIGH,78,HIGH,"subprocess call with shell=True identified, security issue.",8,[8],https://bandit.readthedocs.io/en/1.7.5/plugins/b602_subprocess_popen_with_shell_equals_true.html,B602,subprocess_popen_with_shell_equals_true
"75     with open('sweep_config.yaml') as file:
76         sweep_config = yaml.load(file, Loader=yaml.FullLoader)
77 
",23,62,Python/b61ad56e-05cc-4c61-93fb-0ed0221f6b13_1.py,HIGH,20,MEDIUM,Use of unsafe yaml load. Allows instantiation of arbitrary objects. Consider yaml.safe_load().,76,[76],https://bandit.readthedocs.io/en/1.7.5/plugins/b506_yaml_load.html,B506,yaml_load
"11         result = Zero_One_Knapsack(len(vals), wt, vals, W)
12         assert result == expected, f""Test case {i} failed: expected {expected}, got {result}""
13         print(f""Test case {i} passed"")
",8,93,Python/c902a4fb-96ce-446d-9529-dfa1a652ca16_0.py,HIGH,703,LOW,Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.,12,[12],https://bandit.readthedocs.io/en/1.7.5/plugins/b101_assert_used.html,B101,assert_used
"10     response = client.post(""/emails/"", json={""email_prompt"": test_prompt})
11     assert response.status_code == 200
12     assert ""email_response"" in response.json()
",4,38,Python/c9e107c8-e424-4260-a85e-0bffcf334e2b_1.py,HIGH,703,LOW,Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.,11,[11],https://bandit.readthedocs.io/en/1.7.5/plugins/b101_assert_used.html,B101,assert_used
"11     assert response.status_code == 200
12     assert ""email_response"" in response.json()
13     assert isinstance(response.json()[""email_response""], str)
",4,46,Python/c9e107c8-e424-4260-a85e-0bffcf334e2b_1.py,HIGH,703,LOW,Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.,12,[12],https://bandit.readthedocs.io/en/1.7.5/plugins/b101_assert_used.html,B101,assert_used
"12     assert ""email_response"" in response.json()
13     assert isinstance(response.json()[""email_response""], str)
",4,61,Python/c9e107c8-e424-4260-a85e-0bffcf334e2b_1.py,HIGH,703,LOW,Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.,13,[13],https://bandit.readthedocs.io/en/1.7.5/plugins/b101_assert_used.html,B101,assert_used
"46         # Make the POST request to the token_url
47         token_response = requests.post(
48             token_url,
49             headers=token_request_headers,
50             data=token_data
51         )
52 
",25,9,Python/cd181779-6d66-4e6c-9a4c-4bfd25db80b0_0.py,LOW,400,MEDIUM,Requests call without timeout,47,"[47, 48, 49, 50, 51]",https://bandit.readthedocs.io/en/1.7.5/plugins/b113_request_without_timeout.html,B113,request_without_timeout
"4 def get_dob(url):
5     response = requests.get(url)
6     soup = BeautifulSoup(response.text, 'html.parser')
",15,32,Python/d5ccfa00-a3b3-4ce0-9e00-e64174eba2c5_1.py,LOW,400,MEDIUM,Requests call without timeout,5,[5],https://bandit.readthedocs.io/en/1.7.5/plugins/b113_request_without_timeout.html,B113,request_without_timeout
"25 if __name__ == ""__main__"":
26     app.run(debug=True)
",4,23,Python/e83ec1f2-6a02-4d41-a851-f76dfc011d39_2.py,MEDIUM,94,HIGH,"A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.",26,[26],https://bandit.readthedocs.io/en/1.7.5/plugins/b201_flask_debug_true.html,B201,flask_debug_true
"23     try:
24         response = requests.get(target_url)
25         if response.status_code == 200:
",19,43,Python/eb6683ba-6540-433f-a598-03bc57b13f4f_0.py,LOW,400,MEDIUM,Requests call without timeout,24,[24],https://bandit.readthedocs.io/en/1.7.5/plugins/b113_request_without_timeout.html,B113,request_without_timeout
"34 if __name__ == '__main__':
35     app.run(debug=True)
",4,23,Python/eb6683ba-6540-433f-a598-03bc57b13f4f_0.py,MEDIUM,94,HIGH,"A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.",35,[35],https://bandit.readthedocs.io/en/1.7.5/plugins/b201_flask_debug_true.html,B201,flask_debug_true
"5     # Single line, no quotes
6     assert convert_to_quoted(""Hello, World!"") == '""Hello, World!""'
7     
",4,66,Python/f9b4f1d0-cedb-4576-a145-ad3eac345d27_1.py,HIGH,703,LOW,Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.,6,[6],https://bandit.readthedocs.io/en/1.7.5/plugins/b101_assert_used.html,B101,assert_used
"8     # Single line, with quotes
9     assert convert_to_quoted('Hello, ""World""!') == '""Hello, \\""World\\""!""'
10     
",4,74,Python/f9b4f1d0-cedb-4576-a145-ad3eac345d27_1.py,HIGH,703,LOW,Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.,9,[9],https://bandit.readthedocs.io/en/1.7.5/plugins/b101_assert_used.html,B101,assert_used
"13     expected_result = '""""""Hello,\nWorld!""""""'
14     assert convert_to_quoted(multiline_str) == expected_result
15     
",4,62,Python/f9b4f1d0-cedb-4576-a145-ad3eac345d27_1.py,HIGH,703,LOW,Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.,14,[14],https://bandit.readthedocs.io/en/1.7.5/plugins/b101_assert_used.html,B101,assert_used
"20     expected_result = '""""""Hello,\n\\""World\\"",\nHere are some triple quotes: \\""\\""\\"" """"""'
21     assert convert_to_quoted(multiline_str) == expected_result
22 
",4,62,Python/f9b4f1d0-cedb-4576-a145-ad3eac345d27_1.py,HIGH,703,LOW,Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.,21,[21],https://bandit.readthedocs.io/en/1.7.5/plugins/b101_assert_used.html,B101,assert_used
"23     # Empty string
24     assert convert_to_quoted('') == '""""'
",4,40,Python/f9b4f1d0-cedb-4576-a145-ad3eac345d27_1.py,HIGH,703,LOW,Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.,24,[24],https://bandit.readthedocs.io/en/1.7.5/plugins/b101_assert_used.html,B101,assert_used
"40     while len(unique_phrases) < num_phrases:
41         start_index = random.randint(0, len(words) - phrase_length)
42         phrase = ' '.join(words[start_index:start_index + phrase_length])
",22,67,Python/fdef9ad7-bd4b-431e-bddb-24572a1fccee_0.py,HIGH,330,LOW,Standard pseudo-random generators are not suitable for security/cryptographic purposes.,41,[41],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b311-random,B311,blacklist
"62         }
63         response = requests.get(base_url, params=query_params)
64         results = response.json().get('items', [])
",19,62,Python/fdef9ad7-bd4b-431e-bddb-24572a1fccee_0.py,LOW,400,MEDIUM,Requests call without timeout,63,[63],https://bandit.readthedocs.io/en/1.7.5/plugins/b113_request_without_timeout.html,B113,request_without_timeout
"7     def roll_dice(self):
8         self.value = (randint(1, 6), randint(1, 6))
9         return self.value
",22,35,Python/fea426fb-cb02-4b38-9f42-128f59115fc4_0.py,HIGH,330,LOW,Standard pseudo-random generators are not suitable for security/cryptographic purposes.,8,[8],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b311-random,B311,blacklist
"7     def roll_dice(self):
8         self.value = (randint(1, 6), randint(1, 6))
9         return self.value
",37,50,Python/fea426fb-cb02-4b38-9f42-128f59115fc4_0.py,HIGH,330,LOW,Standard pseudo-random generators are not suitable for security/cryptographic purposes.,8,[8],https://bandit.readthedocs.io/en/1.7.5/blacklists/blacklist_calls.html#b311-random,B311,blacklist
"2 
3 env = Environment(
4     loader=FileSystemLoader('/path/to/templates/'),
5     extensions=[MarkdownExtension]
6 )
",6,1,Python/ff041b92-992d-40f0-b411-42a49ff0b3e3_1.py,HIGH,94,HIGH,"By default, jinja2 sets autoescape to False. Consider using autoescape=True or use the select_autoescape function to mitigate XSS vulnerabilities.",3,"[3, 4, 5, 6]",https://bandit.readthedocs.io/en/1.7.5/plugins/b701_jinja2_autoescape_false.html,B701,jinja2_autoescape_false
"6 gdp_url = ""http://api.worldbank.org/v2/country/all/indicator/NY.GDP.MKTP.CD?date=2020&format=json&per_page=300""
7 gdp_response = requests.get(gdp_url)
8 gdp_data = gdp_response.json()[1]
",15,36,Python/ffa45c61-8b7a-44e1-b757-041f31df5099_0.py,LOW,400,MEDIUM,Requests call without timeout,7,[7],https://bandit.readthedocs.io/en/1.7.5/plugins/b113_request_without_timeout.html,B113,request_without_timeout
"11 area_url = ""http://api.worldbank.org/v2/country/all/indicator/AG.SRF.TOTL.K2?date=2020&format=json&per_page=300""
12 area_response = requests.get(area_url)
13 area_data = area_response.json()[1]
",16,38,Python/ffa45c61-8b7a-44e1-b757-041f31df5099_0.py,LOW,400,MEDIUM,Requests call without timeout,12,[12],https://bandit.readthedocs.io/en/1.7.5/plugins/b113_request_without_timeout.html,B113,request_without_timeout
"6 gdp_url = ""http://api.worldbank.org/v2/country/all/indicator/NY.GDP.MKTP.CD?date=2020&format=json&per_page=300""
7 gdp_response = requests.get(gdp_url)
8 gdp_data = gdp_response.json()[1]
",15,36,Python/ffa45c61-8b7a-44e1-b757-041f31df5099_1.py,LOW,400,MEDIUM,Requests call without timeout,7,[7],https://bandit.readthedocs.io/en/1.7.5/plugins/b113_request_without_timeout.html,B113,request_without_timeout
"11 area_url = ""http://api.worldbank.org/v2/country/all/indicator/AG.SRF.TOTL.K2?date=2020&format=json&per_page=300""
12 area_response = requests.get(area_url)
13 area_data = area_response.json()[1]
",16,38,Python/ffa45c61-8b7a-44e1-b757-041f31df5099_1.py,LOW,400,MEDIUM,Requests call without timeout,12,[12],https://bandit.readthedocs.io/en/1.7.5/plugins/b113_request_without_timeout.html,B113,request_without_timeout
